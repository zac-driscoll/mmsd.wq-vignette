[["index.html", "mmsd.wq Chapter 1 About", " mmsd.wq Zac Driscoll 2021-12-03 Chapter 1 About mmsd.wq is a package used for querying, analyzing, and visualizing MMSDs water quality data. library(mmsd.wq) "],["get-data.html", "Chapter 2 Get Data 2.1 get_survey_data() 2.2 ODBC Connections 2.3 Output Data 2.4 Output Data Definitions 2.5 Query Parameters 2.6 Transformations and Calculations", " Chapter 2 Get Data 2.1 get_survey_data() The core function in mmsd.wq is get_survey_data. This function is used to query and process water quality data from the LIMS server. This is done by first creating ODBC connections with relevant databases (e.g LIMS_exchange and FreshwaterMonitoring). Once connected, get_survey_data utilizes a SQL function (fFreshwaterMonitoringOpSID) written by Kevin Moore, along with other basic SQL queries to retrieve data. R code is used to customize queries and to perform post-processing. Figure 2.1: Basic Data flow of get_survey_data() 2.2 ODBC Connections The get_survey_data functions relies on ODBC connections to retrieve data from databases. A connection can be made using the make_dBConnection() function. #make a connection to the &quot;LIMS_Exchange&quot; database LIMS &lt;- make_dBConnection(database = &quot;LIMS&quot;) #make a connection to the &quot;FreshwaterMontoring&quot; database freshwater &lt;- make_dBConnection(database = &quot;freshwater&quot;) Once connections are made, they can be passed to the get_survey_data arguments to retrieve data. Both a connection to the LIMS_Exchange and FreshwaterMonitoring databases are required. wq_data &lt;- get_survey_data(LIMS_con = &quot;LIMS&quot;,fw_con = &quot;freshwater&quot;, survey_num = &quot;SS 400&quot;) It is best practice to close ODBC connections at the end of every session. This can be done using the odbc package. odbc::dbDisconnect(freshwater) odbc::dbDisconnect(LIMS) If database connections are not provided to the get_survey_function these will be made internally within the function. These connections will be closed after making all necessary queries. As a check, messages will be printed indicating that these connections were made then closed. wq_data &lt;- get_survey_data(survey_num = &quot;SS 400&quot;) ## [1] &quot;LIMS Database Connection open before query?: TRUE&quot; ## [1] &quot;LIMS Database connection open after query?: FALSE&quot; ## [1] &quot;Freshwater Database Connection open before query?: TRUE&quot; ## [1] &quot;Freshwater Database connection open after query?: FALSE&quot; 2.3 Output Data The output of the get_survey_data is a dataframe containing water quality data and its associated meta data. The function works by joining the raw query output returned from the fFreshwaterMonitoringOpSID SQL function to internal package lookup tables and tables from SQL databases. 2.4 Output Data Definitions 2.4.1 Wide Data By default, data are returned in long format. If preferred, data can be returned in wide format by specifying wide = TRUE. By the nature of the data, some columns will be dropped from the output if the data are formatted wide. wq_data_wide &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, wide = TRUE) ## [1] &quot;LIMS Database Connection open before query?: TRUE&quot; ## [1] &quot;LIMS Database connection open after query?: FALSE&quot; ## [1] &quot;Freshwater Database Connection open before query?: TRUE&quot; ## [1] &quot;Freshwater Database connection open after query?: FALSE&quot; 2.4.2 Raw Data By setting raw = TRUE a user can bypass any post-proccessing and output the raw results returned from the fFreshwaterMonitoring SQL function. wq_data_raw &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, raw = TRUE) ## [1] &quot;LIMS Database Connection open before query?: TRUE&quot; ## [1] &quot;LIMS Database connection open after query?: FALSE&quot; 2.5 Query Parameters get_survey_data has several arguments that can be used to refine a query. A start_date and end_date, survey_num, or sample_sid are required. All other arguments are optional. Multiple arguments can be used to create a specific query. Built in error checking code limits the user from creating nonsensical queries. The following sections show how to use the different arguments to refine queries. 2.5.1 Date Range The start_date and end_date arguments can be used to retrieve data within a certain date range. Dates need to be passed as a character object and need to be formatted as YYYY-MM-DD (e.g. 2020-10-31). #get all data collected in 2020 wq_data &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;) 2.5.2 Survey Number Data for an individual survey can be retrieved by using the survey_num argument. The survey_num must be a character string with the survey type (e.g. OH, SS, RR) and its unique survey number separated by a space. Multiple surveys can be retrieved by concetanting their unique survey identifiers. #get all data for SS 400 wq_data &lt;- get_survey_data(survey_num = &quot;SS 400&quot;) #get data from multiple surveys wq_data &lt;- get_survey_data(survey_num = c(&quot;SS 400&quot;,&quot;SS 401&quot;, &quot;SS 402&quot;)) 2.5.3 Sample SID The sample_sid argument can be used to get data for a specific Sample SID(s). Sample SIDs need to be passed to the arguement as a character object (e.g. 20003678 ). Multiple Sample SIDs can be passed during a single query. sample &lt;- get_survey_data(sample_sid = &quot;20003678&quot;) samples &lt;- get_survey_data(sample_sid = c(&quot;20003678&quot;,&quot;20003679&quot;)) 2.5.4 Sites Data can be retrieved for specific sites using the site_code or sitecode arguments. The full site identifier, including depth, can be passed to the site_code argument (e.g. SS-01S,OH-14B). Conversely, the site identifier without depth can be passed to the sitecode argument to retrieve all depths associated with that site. For example, passing OH-01 will retrieve data for OH-01S, OH-01M, and OH-01B. Multiple site identifiers can be passed to either argument to retrieve data for more than one site. #get data for site_code &quot;SS-01S&quot; for a given date range SS_01S &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, site_code = &quot;SS-01S&quot;) #get data for sitecode &quot;SS-01&quot;. Data for all three site depths will be #returned. SS_01 &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, sitecode = &quot;SS-01&quot;) #get data for SS and OH outfalls. outfall_data &lt;- get_survey_data( start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, sitecode = c(&quot;SS-01&quot;, &quot;OH-02&quot;) ) 2.5.5 Site Category Sites are placed into four different categories by FRM staff. These categories include River, Outfall, Lake, and Harbor. Passing any of these values to the site_category argument will retrieve sites with the relevant attribute. #get 2020 outfall data outfall2020 &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, site_category = &quot;Outfall&quot;) #get 2020 lake and harbor data lake_michigan_2020 &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, site_category = c(&quot;Lake&quot;,&quot;River&quot;)) 2.5.6 Source Code Data for given source codes can be retrieved using the source_code argument. Available source codes with their site codes can be found using the internal lookup table site_code_lookup. Multiple values can be passed to retrieve data for more than one source_code. #get 2020 outer harbor data oh2020 &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, source_code = 900) #get 2020 Lake Michigan Data (OH,SS,NS) oh2020 &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, source_code = c(900,902,903)) 2.5.7 WQ Parameters Data can be retrieved for specific parameters using the op_sid or param_name arguments. An operation ID(s) can be passed to the op_sid argument. Available operation IDs can be found in the internal lookup table param_lookup_table. Parameter names can be passed to the param_name argument. The internal vector parameter_names can be used to see the available arguments for param_name. Multiple values can be passed to either argument to retrieve data for more than one parameter. #get DO data by operations ID for survey SS 400 DO_data &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, op_sid = 182) #get 2020 turbidity data turb2020 &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, param_name = &quot;Turbid&quot;) #get 2020 bacteria data bac2020 &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, param_name = c(&quot;E_coli&quot;,&quot;FCMF&quot;)) 2.5.8 Sample Depth The collection_depth argument can be used to retrieve data from a specified depth only. Options include S,M,B. Multiple depths can be specified. #Collect all mid depth data for survey SS 400 surface_data &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, collection_depth = &quot;M&quot;) 2.5.9 Blanks and Replicates By default blanks and replicates are not included in output data. The arguments blanks and/or reps can be set to TRUE include either. Likewise, the argument orig_samples can be set to FALSE to exclude original samples (non QA/QC). #get the blanks and replicates for survey SS 400 blanks_reps &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, blanks = TRUE, reps = TRUE, orig_samples = FALSE) 2.5.10 Flags Q and M flags are not returned by default. To return these results, m_flag and/or q_flag can be set to TRUE. #get all 2020 water quality data - M and Q flags included, flags_included &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, q_flag = TRUE, m_flag = TRUE) 2.5.11 LOQ The above_LOQ argument can be set to TRUE to only return data that is above the LOQ. This argument is set to FALSE by default. above_LOQ &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, above_LOQ = TRUE) ## [1] &quot;LIMS Database Connection open before query?: TRUE&quot; ## [1] &quot;LIMS Database connection open after query?: FALSE&quot; ## [1] &quot;Freshwater Database Connection open before query?: TRUE&quot; ## [1] &quot;Freshwater Database connection open after query?: FALSE&quot; 2.6 Transformations and Calculations 2.6.1 Data Transformations The transformations argument can be used to apply a mathematical transformation to the reading_num column. Currently, log10 and log transformations are available. wq_data_log10 &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, transformation = &quot;log10&quot;) wq_data_log &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, transformation = &quot;log&quot;) 2.6.2 Outliers Outliers in the output data can be identified by using the calculate_outliers argument. Methods include quantile and sd. The quantile method identifies mild and extreme outliers using methods outline in SOP 035. The sd method if the result is 2 times the standard deviation. If this argument is used a column will be added to the output data identifying which results are outliers. wq_data_quant &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, param_name = &quot;DO&quot;, calculate_outliers = &quot;quantile&quot;) wq_data_quant &lt;- get_survey_data(survey_num = &quot;SS 400&quot;, param_name = &quot;DO&quot;, calculate_outliers = &quot;sd&quot;) 2.6.3 Handling Non-Detects When non-detects (NDs) are reported the value in the reading_num field can be returned in four different ways. * zero - NDs are returned as zeros * half - NDs are returned as half of their MDL. * MDL - NDs are returned as the MDL. * remove - NDs are no returned by the function. Any of these options can be passed to the MDL_option argument. The default value for this argument is half. wq_data &lt;- get_survey_data(start_date = &quot;2020-01-01&quot;, end_date = &quot;2020-12-31&quot;, MDL_option = &quot;zero&quot;) "],["package-diagram.html", "Chapter 3 Package Diagram", " Chapter 3 Package Diagram "],["cross.html", "Chapter 4 Vizualize and Analyze", " Chapter 4 Vizualize and Analyze "],["annual-qa-functions.html", "Chapter 5 Annual QA Functions", " Chapter 5 Annual QA Functions "],["shiny-apps.html", "Chapter 6 Shiny Apps", " Chapter 6 Shiny Apps "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
